<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Onboarding Dashboard</title>
  <!-- Font Awesome for icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
  <style>
    /* CSS Variables for consistency */
    :root {
      --primary-color: #2c3e50;
      --secondary-color: #3498db;
      --accent-color: #2ecc71;
      --error-color: #e74c3c;
      --bg-color: #f0f2f5;
      --card-bg: #ffffff;
      --border-color: #e1e1e1;
      --muted-text: #777;
    }

    /* Global Styles */
    * {
      box-sizing: border-box;
    }
    body {
      font-family: 'Roboto', sans-serif;
      background: var(--bg-color);
      margin: 0;
      padding: 20px;
      color: var(--primary-color);
      line-height: 1.6;
    }
    h1 {
      text-align: center;
      margin-bottom: 30px;
      font-weight: 500;
      color: var(--primary-color);
    }
    #dashboard {
      display: flex;
      gap: 20px;
      max-width: 1200px;
      margin: 0 auto;
    }
    
    /* Panels styling */
    #left-panel, #task-panel {
      background: var(--card-bg);
      border-radius: 8px;
      box-shadow: 0 2px 12px rgba(0,0,0,0.05);
      padding: 20px;
    }
    #left-panel {
      flex: 1;
      min-width: 280px;
    }
    #task-panel {
      flex: 2;
    }

    /* Section Headers */
    h2 {
      font-size: 1.4em;
      margin-bottom: 15px;
      color: var(--primary-color);
      border-bottom: 2px solid var(--border-color);
      padding-bottom: 8px;
    }
    
    /* Input & Button Styles */
    input[type="text"],
    input[type="date"],
    select {
      width: 100%;
      padding: 10px;
      margin-top: 10px;
      border: 1px solid var(--border-color);
      border-radius: 6px;
      font-size: 1em;
      outline: none;
      transition: border 0.3s;
    }
    input[type="text"]:focus,
    input[type="date"]:focus,
    select:focus {
      border-color: var(--secondary-color);
    }
    button {
      width: 100%;
      padding: 10px;
      margin-top: 10px;
      border: none;
      border-radius: 6px;
      font-size: 1em;
      cursor: pointer;
      transition: background 0.3s;
    }
    button#add-mytask-button,
    button#add-task-button {
      background: var(--accent-color);
      color: #fff;
    }
    button#add-mytask-button:hover,
    button#add-task-button:hover {
      background: #27ae60;
    }
    button#add-employee-button {
      background: var(--secondary-color);
      color: #fff;
    }
    button#add-employee-button:hover {
      background: #2980b9;
    }
    button#clear-data-button {
      background: var(--error-color);
      color: #fff;
    }
    button#clear-data-button:hover {
      background: #c0392b;
    }

    /* List and Card Styles */
    ul {
      padding: 0;
      margin: 0;
    }
    #task-list li {
      list-style: none;
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 10px;
    }
    #task-list li span {
      flex: 1;
    }
    
    /* My Tasks Section */
    #my-tasks-section {
      margin-bottom: 20px;
      padding: 15px;
      background: var(--card-bg);
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }
    #my-tasks-section h2 {
      cursor: pointer;
      border-bottom: 1px solid var(--border-color);
      padding-bottom: 5px;
    }
    
    /* Employee Icons & My Task Icons Spacing */
    .employee-icons,
    .my-task-icons {
      display: flex;
      gap: 8px;
    }
    .employee-icons i,
    .my-task-icons i {
      cursor: pointer;
      color: var(--muted-text);
      transition: color 0.2s;
    }
    .employee-icons i:hover,
    .my-task-icons i:hover {
      color: var(--primary-color);
    }
    .employee-icons i {
      font-size: 1.2em;
    }
    .my-task-icons i {
      font-size: 1.1em;
    }
    
    /* Employees Section */
    #employee-panel {
      margin-top: 20px;
      padding: 20px;
    }
    #employee-panel h2 {
      margin-top: 0;
      border-bottom: 2px solid var(--border-color);
      padding-bottom: 10px;
    }
    #employee-panel input,
    #employee-panel button {
      margin-bottom: 10px;
    }
    #employee-list {
      margin-top: 10px;
    }
    #employee-list li {
      padding: 10px 15px;
      background: #fdfdfd;
      border: 1px solid var(--border-color);
      border-radius: 6px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      transition: background 0.3s, transform 0.2s;
      cursor: pointer;
      margin-bottom: 15px;
    }
    #employee-list li:hover {
      background: #f0f4f8;
      transform: translateY(-2px);
    }
    
    /* Weekly Tasks Header in Left Panel */
    #weekly-tasks-header {
      margin-top: 20px;
      font-size: 1.4em;
      color: var(--primary-color);
      border-bottom: 2px solid var(--border-color);
      padding-bottom: 8px;
      cursor: pointer;
    }
    
    /* Task Panel */
    #task-panel h2 {
      font-size: 1.6em;
      margin-top: 0;
      border-bottom: 2px solid var(--border-color);
      padding-bottom: 10px;
      margin-bottom: 20px;
    }
    #task-form input,
    #task-form select {
      margin-right: 10px;
      width: calc(50% - 15px);
    }
    
    /* Week Grouping */
    .week-group {
      margin-bottom: 25px;
      border: 1px solid var(--border-color);
      border-radius: 6px;
      overflow: hidden;
    }
    .week-group-header {
      font-size: 1.4em;
      font-weight: 600;
      padding: 12px;
      background: #f0f4f8;
      border-bottom: 1px solid var(--border-color);
      cursor: pointer;
      transition: background 0.3s;
    }
    .week-group-header:hover {
      background: #e9eff4;
    }
    .tasks-container {
      padding: 10px;
    }
    .week-group.collapsed .tasks-container {
      display: none;
    }
    
    /* Task Items */
    .task-item {
      display: flex;
      align-items: center;
      padding: 10px;
      background: #fdfdfd;
      border: 1px solid var(--border-color);
      border-radius: 6px;
      margin-bottom: 10px;
      transition: background 0.3s;
      position: relative;
    }
    .task-item:hover {
      background: #f9f9f9;
    }
    .task-desc {
      flex: 1;
      font-size: 1em;
      color: var(--primary-color);
    }
    .task-desc.done {
      text-decoration: line-through;
      color: var(--muted-text);
    }
    .task-options {
      margin-left: auto;
      position: relative;
      cursor: pointer;
    }
    .task-options > .ellipsis {
      color: var(--muted-text);
      font-size: 1.4em;
      display: inline-block;
      width: 24px;
      text-align: center;
    }
    .options-menu {
      position: absolute;
      right: 0;
      top: 100%;
      background: var(--card-bg);
      border: 1px solid var(--border-color);
      box-shadow: 0 2px 6px rgba(0,0,0,0.1);
      border-radius: 4px;
      padding: 5px;
      display: none;
      white-space: nowrap;
      z-index: 1000;
    }
    .task-options:hover .options-menu {
      display: flex;
      gap: 12px;
    }
    .options-menu i {
      font-size: 14px;
      cursor: pointer;
      color: var(--muted-text);
      transition: color 0.2s;
    }
    .options-menu i:hover {
      color: var(--primary-color);
    }
    
    /* Weekly Tasks Interactive View Styling */
    .weekly-task-item {
      background: #eef9ff;
      border-left: 4px solid var(--secondary-color);
      padding: 10px;
      margin-bottom: 10px;
      border-radius: 4px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      display: flex;
      align-items: center;
    }
    .weekly-task-item:hover {
      background: #dff2ff;
    }
    
    /* Make task list scrollable so the page doesnâ€™t become super long */
    #task-list {
      max-height: 70vh;
      overflow-y: auto;
    }
    
    /* Styling for the due date in weekly tasks */
    .task-due {
      margin-left: auto;
      font-weight: 500;
      color: var(--primary-color);
    }
  </style>
</head>
<body>
  <h1>Onboarding Dashboard</h1>
  <div id="dashboard">
    <!-- Left Panel: My Tasks, Employees, and Weekly Tasks Header -->
    <div id="left-panel">
      <!-- My Tasks Section -->
      <div id="my-tasks-section">
        <h2 id="my-tasks-header">My Tasks</h2>
        <input type="text" id="mytask-desc-input" placeholder="Enter your task">
        <input type="date" id="mytask-due-input" placeholder="Due date">
        <button id="add-mytask-button">Add My Task</button>
        <ul id="my-task-list"></ul>
      </div>
      <!-- Employees Section -->
      <div id="employee-panel">
        <h2>Employees</h2>
        <input type="text" id="employee-name-input" placeholder="Enter employee name">
        <input type="date" id="hire-date-input" placeholder="Enter hire date">
        <button id="add-employee-button">Add Employee</button>
        <button id="clear-data-button">Clear All Data</button>
        <ul id="employee-list"></ul>
      </div>
      <!-- Weekly Tasks Header -->
      <h2 id="weekly-tasks-header">Tasks for This Week</h2>
    </div>
    <!-- Right Panel: Tasks Display -->
    <div id="task-panel">
      <h2 id="employee-title">Select an Employee or My Tasks</h2>
      <!-- Employee Task Form (visible in employee view) -->
      <div id="task-form" style="display: none;">
        <input type="text" id="task-desc-input" placeholder="Enter task description">
        <select id="task-week-input">
          <option value="">Select Week</option>
        </select>
        <button id="add-task-button">Add Task</button>
      </div>
      <!-- Tasks will be rendered here -->
      <div id="task-list"></div>
    </div>
  </div>

  <script>
    /***** Global Variables *****/
    let currentView = "employee"; // "employee", "mytasks", or "weekly"
    let employees = [];           // Array for employee data.
    let currentEmployeeId = null; // Currently selected employee.
    let myTasks = [];             // Array for personal tasks.
    // Global object to preserve week-group state per employee per week.
    let weekGroupState = {}; 

    /***** Preloaded Tasks for Employee Onboarding *****/
    function generateEmployeeTasks() {
      const preloadedTasks = {
        2: [
          "Check NHOB Survey Results",
          "Friday Survey Reminder",
          "Schedule Quality Presentation #1 in week 15",
          "Schedule Quality Presentation #2 in week 18",
          "Schedule Building Careers at Progressive in week 19",
          "Schedule JO's Refresher in week 21",
          "Schedule Quality Presentation #3 in week 22",
          "meet and greets in week 6 or 8",
          "Schedule a readiness review in week 12",
          "Schedule a readiness review in week 14",
          "Check Attendance"
        ],
        3: [
          "Check NHOB Survey Results",
          "Check Attendance"
        ],
        4: [
          "Check Attendance"
        ],
        5: [
          "Check Attendance"
        ],
        6: [
          "LineOne Profile Change Check",
          "Check Attendance"
        ],
        7: [
          "Review CQA Progress Tracker",
          "Check NHOB Survey Results",
          "Check Attendance"
        ],
        8: [
          "Aux 5 Huddle",
          "LineOne Profile Change Check",
          "Check Attendance"
        ],
        9: [
          "Review CQA Progress Tracker",
          "Check Attendance"
        ],
        10: [
          "Friday Survey Reminder",
          "Aux 5 Huddle",
          "LineOne Profile Change Check",
          "Attend Coaching Sessions",
          "Check Attendance"
        ],
        11: [
          "Check NHOB Survey Results",
          "Check Attendance",
          "Send Lunch Duration Email"
        ],
        12: [
          "Alumni Attendance Email",
          "Aux 5 Huddle",
          "Check Attendance",
          "Week 10 Readiness Review with Agents"
        ],
        13: [
          "Review CQA Progress Tracker",
          "Aux 5 Huddle",
          "Send Lunch Duration SRM",
          "Check Attendance",
          "Attend Coaching Sessions",
          "Close NHOB Attendance Warnings"
        ],
        14: [
          "Friday Survey Reminder",
          "English Calls",
          "Aux 5 Huddle",
          "Review Calls/Access for Coaching",
          "Update HR Express",
          "Week 13 Readiness Reviews with Coaches",
          "Week 13 Readiness Review with Agents",
          "Send Congratulatory Email",
          "Check Attendance"
        ],
        15: [
          "Aux 5 Huddle",
          "Check Attendance",
          "Check NHOB Survey Results",
          "Start Coaching Plan",
          "Quality Presentation #1"
        ],
        16: [
          "Aux 5 Huddle",
          "Check Attendance",
          "Coaching",
          "Metrics Review/Expectations"
        ],
        17: [
          "Aux 5 Huddle",
          "Coaching",
          "Check Attendance"
        ],
        18: [
          "Friday Survey Reminder",
          "Aux 5 Huddle",
          "Coaching",
          "Check Attendance",
          "Quality Presentation #2"
        ],
        19: [
          "Check NHOB Survey Results",
          "Building Careers at Progressive",
          "Aux 5 Huddle",
          "Coaching",
          "Check Attendance"
        ],
        20: [
          "Aux 5 Huddle",
          "Communicate Operations Supervisor",
          "Coaching",
          "Check Attendance"
        ],
        21: [
          "Aux 5 Huddle",
          "Schedule Handoff Meeting",
          "JO's Refresher",
          "Coaching",
          "Check Attendance"
        ],
        22: [
          "Friday Survey Reminder",
          "Aux 5 Huddle",
          "Coaching",
          "Check Attendance",
          "Quality Presentation #3"
        ],
        23: [
          "Check NHOB Survey Results",
          "Aux 5 Huddle",
          "Coaching",
          "Check Attendance"
        ],
        24: [
          "Aux 5 Huddle",
          "Facilitate hand off meeting",
          "Check Attendance",
          "Update HRExpress",
          "Close Job Objective",
          "Certificate of Completion"
        ]
      };

      const tasks = [];
      for (const week in preloadedTasks) {
        preloadedTasks[week].forEach(taskDesc => {
          tasks.push({
            id: generateId(),
            description: taskDesc,
            week: parseInt(week, 10),
            done: false
          });
        });
      }
      return tasks;
    }

    /***** Date Calculation Functions *****/
    function getOnboardingStartDate(hireDate) {
      const start = new Date(hireDate);
      const day = start.getDay();
      if (day !== 0) {
        start.setDate(start.getDate() + (7 - day));
      }
      return start;
    }
    function getCurrentWeek(onboardingStartDate) {
      const now = new Date();
      if (now < onboardingStartDate) return 0;
      const diffInDays = Math.floor((now - onboardingStartDate) / (1000 * 60 * 60 * 24));
      return Math.floor(diffInDays / 7) + 1;
    }
    // For My Tasks: compute the end of the current week (assume week ends on Saturday)
    function getEndOfCurrentWeek() {
      const now = new Date();
      const day = now.getDay();
      const diff = 6 - day;
      const end = new Date(now);
      end.setDate(now.getDate() + diff);
      end.setHours(23, 59, 59, 999);
      return end;
    }
    function formatDate(date) {
      const options = { year: 'numeric', month: 'short', day: 'numeric' };
      return date.toLocaleDateString(undefined, options);
    }

    /***** Utility Functions *****/
    function generateId() {
      return '_' + Math.random().toString(36).substr(2, 9);
    }
    function saveData() {
      localStorage.setItem('onboardingData', JSON.stringify(employees));
    }
    function loadData() {
      const data = localStorage.getItem('onboardingData');
      if (data) {
        employees = JSON.parse(data);
      }
      renderEmployeeList();
    }
    function saveMyTasks() {
      localStorage.setItem('myTasksData', JSON.stringify(myTasks));
    }
    function loadMyTasks() {
      const data = localStorage.getItem('myTasksData');
      if (data) {
        myTasks = JSON.parse(data);
      }
    }
    // Populate week dropdown
    const weekSelect = document.getElementById('task-week-input');
    for (let i = 1; i <= 24; i++) {
      const option = document.createElement('option');
      option.value = i;
      option.textContent = "Week " + i;
      weekSelect.appendChild(option);
    }

    /***** Employee Functions *****/
    function addEmployee(name, hireDateStr) {
      const newEmployee = { 
        id: generateId(),
        name: name, 
        hireDate: hireDateStr,
        tasks: generateEmployeeTasks()  // Preloaded tasks by week
      };
      employees.push(newEmployee);
      saveData();
      renderEmployeeList();
    }
    function removeEmployee(id) {
      employees = employees.filter(emp => emp.id !== id);
      if (currentEmployeeId === id) {
        currentEmployeeId = null;
        document.getElementById('employee-title').textContent = "Select an Employee";
        document.getElementById('task-form').style.display = "none";
        document.getElementById('task-list').innerHTML = "";
      }
      saveData();
      renderEmployeeList();
    }
    function editEmployee(id) {
      const employee = employees.find(emp => emp.id === id);
      if (employee) {
        const newName = prompt("Edit employee name:", employee.name);
        const newHireDate = prompt("Edit hire date (YYYY-MM-DD):", employee.hireDate);
        if (newName && newName.trim() !== "") {
          employee.name = newName.trim();
        }
        if (newHireDate && newHireDate.trim() !== "") {
          employee.hireDate = newHireDate.trim();
        }
        saveData();
        renderEmployeeList();
      }
    }
    function selectEmployee(id) {
      currentEmployeeId = id;
      currentView = "employee";
      const employee = employees.find(emp => emp.id === id);
      if (employee) {
        document.getElementById('employee-title').textContent = employee.name + "'s Tasks";
        document.getElementById('task-form').style.display = "block";
        renderRightPanel();
      }
    }
    function renderEmployeeList() {
      const list = document.getElementById('employee-list');
      list.innerHTML = "";
      employees.forEach((emp, index) => {
        const onboardingStart = getOnboardingStartDate(new Date(emp.hireDate));
        const currentWeek = getCurrentWeek(onboardingStart);
        const weekDisplay = currentWeek > 0 ? "Week " + currentWeek : "Pre-onboarding";
        const li = document.createElement('li');
        li.setAttribute('draggable', true);
        li.dataset.index = index;
        li.addEventListener('dragstart', e => {
          e.dataTransfer.setData('text/plain', index);
          e.dataTransfer.effectAllowed = "move";
          li.classList.add('dragging');
        });
        li.addEventListener('dragend', () => {
          li.classList.remove('dragging');
        });
        li.addEventListener('dragenter', () => {
          if (!li.classList.contains('dragging')) {
            li.classList.add('drag-over');
          }
        });
        li.addEventListener('dragleave', () => {
          li.classList.remove('drag-over');
        });
        li.addEventListener('dragover', e => {
          e.preventDefault();
          e.dataTransfer.dropEffect = "move";
        });
        li.addEventListener('drop', e => {
          e.preventDefault();
          const draggedIndex = parseInt(e.dataTransfer.getData('text/plain'));
          const targetIndex = parseInt(li.dataset.index);
          if (draggedIndex !== targetIndex) {
            const [draggedEmployee] = employees.splice(draggedIndex, 1);
            employees.splice(targetIndex, 0, draggedEmployee);
            saveData();
            renderEmployeeList();
          }
          li.classList.remove('drag-over');
        });
        const nameSpan = document.createElement('span');
        nameSpan.textContent = `${emp.name} (${weekDisplay})`;
        li.appendChild(nameSpan);
        const iconsDiv = document.createElement('div');
        iconsDiv.className = 'employee-icons';
        const editIcon = document.createElement('i');
        editIcon.className = 'fas fa-pencil-alt';
        editIcon.title = "Edit Employee";
        editIcon.addEventListener('click', e => {
          e.stopPropagation();
          editEmployee(emp.id);
        });
        iconsDiv.appendChild(editIcon);
        const deleteIcon = document.createElement('i');
        deleteIcon.className = 'fas fa-trash-alt';
        deleteIcon.title = "Delete Employee";
        deleteIcon.addEventListener('click', e => {
          e.stopPropagation();
          if (confirm(`Are you sure you want to remove ${emp.name}?`)) {
            removeEmployee(emp.id);
          }
        });
        iconsDiv.appendChild(deleteIcon);
        li.appendChild(iconsDiv);
        li.addEventListener('click', () => {
          selectEmployee(emp.id);
        });
        list.appendChild(li);
      });
      renderWeeklyTasksHeader();
    }

    /***** Task Functions (Employee Tasks) *****/
    function addTaskToEmployee(description, week) {
      if (currentEmployeeId) {
        const employee = employees.find(emp => emp.id === currentEmployeeId);
        if (employee) {
          employee.tasks.push({
            id: generateId(),
            description: description,
            week: parseInt(week, 10),
            done: false
          });
          saveData();
          renderRightPanel();
        }
      }
    }
    function toggleTaskDone(employeeId, taskId) {
      const employee = employees.find(emp => emp.id === employeeId);
      if (employee) {
        const task = employee.tasks.find(t => t.id === taskId);
        if (task) {
          task.done = !task.done;
          saveData();
          renderRightPanel();
        }
      }
    }
    function removeTask(employeeId, taskId) {
      const employee = employees.find(emp => emp.id === employeeId);
      if (employee) {
        employee.tasks = employee.tasks.filter(t => t.id !== taskId);
        saveData();
        renderRightPanel();
      }
    }
    function editTask(employeeId, taskId) {
      const employee = employees.find(emp => emp.id === employeeId);
      if (employee) {
        const task = employee.tasks.find(t => t.id === taskId);
        if (task) {
          const newDesc = prompt("Edit task description:", task.description);
          if (newDesc && newDesc.trim() !== "") {
            task.description = newDesc.trim();
            saveData();
            renderRightPanel();
          }
        }
      }
    }

    /***** My Tasks Functions (Personal Tasks) *****/
    function addMyTask(description, dueDate) {
      const newTask = {
        id: generateId(),
        description: description,
        dueDate: dueDate,
        done: false
      };
      myTasks.push(newTask);
      saveMyTasks();
      renderRightPanel();
    }
    function toggleMyTaskDone(id) {
      const task = myTasks.find(t => t.id === id);
      if (task) {
        task.done = !task.done;
        saveMyTasks();
        renderRightPanel();
      }
    }
    function removeMyTask(id) {
      myTasks = myTasks.filter(t => t.id !== id);
      saveMyTasks();
      renderRightPanel();
    }
    function editMyTask(id) {
      const task = myTasks.find(t => t.id === id);
      if (task) {
        const newDesc = prompt("Edit task description:", task.description);
        if (newDesc && newDesc.trim() !== "") {
          task.description = newDesc.trim();
          saveMyTasks();
          renderRightPanel();
        }
      }
    }

    /***** Weekly Tasks Header Click Event *****/
    document.getElementById('weekly-tasks-header').addEventListener('click', () => {
      currentView = "weekly";
      currentEmployeeId = null;
      document.getElementById('employee-title').textContent = "Tasks for This Week";
      renderRightPanel();
    });

    /***** Weekly Tasks Interactive View Rendering *****/
    function renderWeeklyTasksView() {
      const container = document.getElementById('task-list');
      container.innerHTML = "";
      let aggregated = [];
      // Process Employee Tasks: include tasks not done where task.week <= current week.
      employees.forEach(employee => {
        const onboardingStart = getOnboardingStartDate(new Date(employee.hireDate));
        const currentWeek = getCurrentWeek(onboardingStart);
        employee.tasks.forEach(task => {
          if (!task.done && task.week <= currentWeek) {
            const dueDate = new Date(onboardingStart.getTime() + (task.week - 1) * 7 * 24 * 60 * 60 * 1000);
            aggregated.push({
              type: "employee",
              employeeId: employee.id,
              employeeName: employee.name,
              taskId: task.id,
              description: `${employee.name}, ${task.description}`,
              dueDate: dueDate
            });
          }
        });
      });
      // Process My Tasks: include tasks not done with due date <= end of current week.
      const endOfWeek = getEndOfCurrentWeek();
      myTasks.forEach(task => {
        const due = new Date(task.dueDate);
        if (!task.done && due <= endOfWeek) {
          aggregated.push({
            type: "mytask",
            description: task.description,
            dueDate: due,
            taskId: task.id
          });
        }
      });
      // Sort aggregated tasks by due date
      aggregated.sort((a, b) => a.dueDate - b.dueDate);
      
      if (aggregated.length === 0) {
        const div = document.createElement('div');
        div.textContent = "No tasks for this week.";
        container.appendChild(div);
      } else {
        aggregated.forEach(item => {
          const taskItem = document.createElement('div');
          taskItem.className = 'task-item weekly-task-item';
          
          const checkbox = document.createElement('input');
          checkbox.type = 'checkbox';
          checkbox.checked = false; // Only pending tasks are aggregated
          // Prevent collapse when clicking the checkbox:
          checkbox.addEventListener('click', e => { e.stopPropagation(); });
          checkbox.addEventListener('change', e => {
            e.stopPropagation();
            if (item.type === "employee") {
              toggleTaskDone(item.employeeId, item.taskId);
            } else {
              toggleMyTaskDone(item.taskId);
            }
          });
          taskItem.appendChild(checkbox);
          
          const desc = document.createElement('div');
          desc.className = 'task-desc';
          desc.textContent = item.description;
          taskItem.appendChild(desc);
          
          const dueDateEl = document.createElement('div');
          dueDateEl.className = 'task-due';
          dueDateEl.textContent = formatDate(item.dueDate);
          taskItem.appendChild(dueDateEl);
          
          const optionsContainer = document.createElement('div');
          optionsContainer.className = 'task-options';
          const ellipsis = document.createElement('i');
          ellipsis.className = 'fas fa-ellipsis-h ellipsis';
          optionsContainer.appendChild(ellipsis);
          const optionsMenu = document.createElement('div');
          optionsMenu.className = 'options-menu';
          const editIcon = document.createElement('i');
          editIcon.className = 'fas fa-pencil-alt';
          editIcon.title = "Edit task";
          // Enable editing for both my tasks and employee tasks in aggregated view:
          editIcon.addEventListener('click', e => {
            e.stopPropagation();
            if (item.type === "employee") {
              editTask(item.employeeId, item.taskId);
            } else {
              editMyTask(item.taskId);
            }
          });
          optionsMenu.appendChild(editIcon);
          const deleteIcon = document.createElement('i');
          deleteIcon.className = 'fas fa-trash-alt';
          deleteIcon.title = "Delete task";
          deleteIcon.addEventListener('click', e => {
            e.stopPropagation();
            if (item.type === "employee") {
              removeTask(item.employeeId, item.taskId);
            } else {
              removeMyTask(item.taskId);
            }
          });
          optionsMenu.appendChild(deleteIcon);
          optionsContainer.appendChild(optionsMenu);
          taskItem.appendChild(optionsContainer);
          
          container.appendChild(taskItem);
        });
      }
    }

    /***** Right Panel Rendering *****/
    function renderRightPanel() {
      const taskListContainer = document.getElementById('task-list');
      taskListContainer.innerHTML = "";
      if (currentView === "employee") {
        if (!currentEmployeeId) {
          document.getElementById('employee-title').textContent = "Select an Employee";
          document.getElementById('task-form').style.display = "none";
          return;
        }
        document.getElementById('task-form').style.display = "block";
        const employee = employees.find(emp => emp.id === currentEmployeeId);
        document.getElementById('employee-title').textContent = employee.name + "'s Tasks";
        renderEmployeeTasks();
      } else if (currentView === "mytasks") {
        document.getElementById('task-form').style.display = "none";
        document.getElementById('employee-title').textContent = "My Tasks";
        renderMyTasksView();
      } else if (currentView === "weekly") {
        document.getElementById('task-form').style.display = "none";
        document.getElementById('employee-title').textContent = "Tasks for This Week";
        renderWeeklyTasksView();
      }
    }
    function renderEmployeeTasks() {
      const taskListContainer = document.getElementById('task-list');
      taskListContainer.innerHTML = "";
      const employee = employees.find(emp => emp.id === currentEmployeeId);
      if (employee) {
        const onboardingStart = getOnboardingStartDate(new Date(employee.hireDate));
        const groupedTasks = {};
        employee.tasks.forEach(task => {
          if (!groupedTasks[task.week]) {
            groupedTasks[task.week] = [];
          }
          groupedTasks[task.week].push(task);
        });
        const weeks = Object.keys(groupedTasks).sort((a, b) => a - b);
        weeks.forEach(week => {
          const tasksForWeek = groupedTasks[week];
          if (tasksForWeek.every(task => task.done)) return;
          const key = employee.id + "_" + week;
          let isExpanded = weekGroupState[key] === true; // true if previously expanded
          const weekGroup = document.createElement('div');
          weekGroup.className = 'week-group' + (isExpanded ? "" : " collapsed");
          const weekNumber = parseInt(week, 10);
          const weekStartDate = new Date(onboardingStart.getTime() + (weekNumber - 1) * 7 * 24 * 60 * 60 * 1000);
          const formattedDate = formatDate(weekStartDate);
          const weekHeader = document.createElement('div');
          weekHeader.className = 'week-group-header';
          weekHeader.textContent = `Week ${week} (${formattedDate})`;
          weekHeader.addEventListener('click', e => {
            if (e.target === weekHeader) {
              weekGroup.classList.toggle('collapsed');
              weekGroupState[key] = !weekGroup.classList.contains('collapsed');
            }
          });
          weekGroup.appendChild(weekHeader);
          const tasksContainer = document.createElement('div');
          tasksContainer.className = 'tasks-container';
          tasksForWeek.forEach(task => {
            const taskItem = document.createElement('div');
            taskItem.className = 'task-item';
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.checked = task.done;
            checkbox.addEventListener('click', e => { e.stopPropagation(); });
            checkbox.addEventListener('change', e => {
              e.stopPropagation();
              toggleTaskDone(employee.id, task.id);
            });
            taskItem.appendChild(checkbox);
            const taskDesc = document.createElement('div');
            taskDesc.className = 'task-desc';
            taskDesc.textContent = task.description;
            if (task.done) {
              taskDesc.classList.add('done');
            }
            taskItem.appendChild(taskDesc);
            const optionsContainer = document.createElement('div');
            optionsContainer.className = 'task-options';
            const ellipsis = document.createElement('i');
            ellipsis.className = 'fas fa-ellipsis-h ellipsis';
            optionsContainer.appendChild(ellipsis);
            const optionsMenu = document.createElement('div');
            optionsMenu.className = 'options-menu';
            const editIcon = document.createElement('i');
            editIcon.className = 'fas fa-pencil-alt';
            editIcon.title = "Edit task";
            editIcon.addEventListener('click', e => {
              e.stopPropagation();
              editTask(employee.id, task.id);
            });
            optionsMenu.appendChild(editIcon);
            const deleteIcon = document.createElement('i');
            deleteIcon.className = 'fas fa-trash-alt';
            deleteIcon.title = "Delete task";
            deleteIcon.addEventListener('click', e => {
              e.stopPropagation();
              if (confirm("Remove this task?")) {
                removeTask(employee.id, task.id);
              }
            });
            optionsMenu.appendChild(deleteIcon);
            optionsContainer.appendChild(optionsMenu);
            taskItem.appendChild(optionsContainer);
            tasksContainer.appendChild(taskItem);
          });
          weekGroup.appendChild(tasksContainer);
          taskListContainer.appendChild(weekGroup);
        });
      }
    }
    function renderMyTasksView() {
      const taskListContainer = document.getElementById('task-list');
      taskListContainer.innerHTML = "";
      const sortedTasks = [...myTasks].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));
      sortedTasks.forEach(task => {
        const li = document.createElement('li');
        li.style.listStyle = "none";
        const taskInfo = document.createElement('span');
        taskInfo.style.flex = "1";
        taskInfo.textContent = `${task.description} (Due: ${formatDate(new Date(task.dueDate))})`;
        if (task.done) {
          taskInfo.style.textDecoration = "line-through";
          taskInfo.style.color = getComputedStyle(document.documentElement).getPropertyValue('--muted-text');
        }
        li.appendChild(taskInfo);
        
        const iconsDiv = document.createElement('div');
        iconsDiv.className = "my-task-icons";
        
        const checkboxIcon = document.createElement('i');
        checkboxIcon.className = task.done ? 'fas fa-check-square' : 'far fa-square';
        checkboxIcon.title = "Toggle Complete";
        checkboxIcon.addEventListener('click', e => {
          e.stopPropagation();
          toggleMyTaskDone(task.id);
        });
        iconsDiv.appendChild(checkboxIcon);
        
        const editIcon = document.createElement('i');
        editIcon.className = 'fas fa-pencil-alt';
        editIcon.title = "Edit Task";
        editIcon.addEventListener('click', e => {
          e.stopPropagation();
          editMyTask(task.id);
        });
        iconsDiv.appendChild(editIcon);
        
        const deleteIcon = document.createElement('i');
        deleteIcon.className = 'fas fa-trash-alt';
        deleteIcon.title = "Delete Task";
        deleteIcon.addEventListener('click', e => {
          e.stopPropagation();
          if (confirm("Remove this task?")) {
            removeMyTask(task.id);
          }
        });
        iconsDiv.appendChild(deleteIcon);
        
        li.appendChild(iconsDiv);
        taskListContainer.appendChild(li);
      });
    }

    /***** Event Listeners *****/
    document.getElementById('add-employee-button').addEventListener('click', () => {
      const nameInput = document.getElementById('employee-name-input');
      const hireDateInput = document.getElementById('hire-date-input');
      const name = nameInput.value.trim();
      const hireDateStr = hireDateInput.value;
      if (!name || !hireDateStr) {
        alert("Please enter both the employee name and hire date.");
        return;
      }
      addEmployee(name, hireDateStr);
      nameInput.value = "";
      hireDateInput.value = "";
    });
    document.getElementById('clear-data-button').addEventListener('click', () => {
      if (confirm("Are you sure you want to erase all data for this website? This action cannot be undone.")) {
        localStorage.removeItem('onboardingData');
        localStorage.removeItem('myTasksData');
        employees = [];
        myTasks = [];
        currentEmployeeId = null;
        renderEmployeeList();
        document.getElementById('task-form').style.display = "none";
        document.getElementById('task-list').innerHTML = "";
        renderWeeklyTasksView();
      }
    });
    document.getElementById('add-task-button').addEventListener('click', () => {
      const descInput = document.getElementById('task-desc-input');
      const weekInput = document.getElementById('task-week-input');
      const description = descInput.value.trim();
      const week = weekInput.value;
      if (description && week) {
        addTaskToEmployee(description, week);
        descInput.value = "";
        weekInput.selectedIndex = 0;
      }
    });
    document.getElementById('add-mytask-button').addEventListener('click', () => {
      const descInput = document.getElementById('mytask-desc-input');
      const dueInput = document.getElementById('mytask-due-input');
      const description = descInput.value.trim();
      const dueDate = dueInput.value;
      if (description && dueDate) {
        addMyTask(description, dueDate);
        descInput.value = "";
        dueInput.value = "";
      }
    });
    document.getElementById('my-tasks-header').addEventListener('click', () => {
      currentView = "mytasks";
      currentEmployeeId = null;
      document.getElementById('employee-title').textContent = "My Tasks";
      renderRightPanel();
    });
    window.onload = () => {
      loadData();
      loadMyTasks();
      renderRightPanel();
    };
  </script>
</body>
</html>//
